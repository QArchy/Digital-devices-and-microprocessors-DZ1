// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/28/2023 10:04:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	A0,
	A1,
	A2,
	LED-A,
	LED-B,
	LED-C,
	LED-D,
	LED-E,
	LED-F,
	LED-G,
	U2_138_select,
	U3_138_select,
	sampler_rx
);
input  A0;
input  A1;
input  A2;
input  LED-A;
input  LED-B;
input  LED-C;
input  LED-D;
input  LED-E;
input  LED-F;
input  LED-G;
input  U2_138_select;
input  U3_138_select;
input sampler_rx;

reg  A0_expected;
reg  A1_expected;
reg  A2_expected;
reg  LED-A_expected;
reg  LED-B_expected;
reg  LED-C_expected;
reg  LED-D_expected;
reg  LED-E_expected;
reg  LED-F_expected;
reg  LED-G_expected;
reg  U2_138_select_expected;
reg  U3_138_select_expected;

reg  A0_prev;
reg  A1_prev;
reg  A2_prev;
reg  LED-A_prev;
reg  LED-B_prev;
reg  LED-C_prev;
reg  LED-D_prev;
reg  LED-E_prev;
reg  LED-F_prev;
reg  LED-G_prev;
reg  U2_138_select_prev;
reg  U3_138_select_prev;

reg  A0_expected_prev;
reg  A1_expected_prev;
reg  A2_expected_prev;
reg  LED-A_expected_prev;
reg  LED-B_expected_prev;
reg  LED-C_expected_prev;
reg  LED-D_expected_prev;
reg  LED-E_expected_prev;
reg  LED-F_expected_prev;
reg  LED-G_expected_prev;

reg  last_A0_exp;
reg  last_A1_exp;
reg  last_A2_exp;
reg  last_LED-A_exp;
reg  last_LED-B_exp;
reg  last_LED-C_exp;
reg  last_LED-D_exp;
reg  last_LED-E_exp;
reg  last_LED-F_exp;
reg  last_LED-G_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	A0_prev = A0;
	A1_prev = A1;
	A2_prev = A2;
	LED-A_prev = LED-A;
	LED-B_prev = LED-B;
	LED-C_prev = LED-C;
	LED-D_prev = LED-D;
	LED-E_prev = LED-E;
	LED-F_prev = LED-F;
	LED-G_prev = LED-G;
	U2_138_select_prev = U2_138_select;
	U3_138_select_prev = U3_138_select;
end

// update expected /o prevs

always @(trigger)
begin
	A0_expected_prev = A0_expected;
	A1_expected_prev = A1_expected;
	A2_expected_prev = A2_expected;
	LED-A_expected_prev = LED-A_expected;
	LED-B_expected_prev = LED-B_expected;
	LED-C_expected_prev = LED-C_expected;
	LED-D_expected_prev = LED-D_expected;
	LED-E_expected_prev = LED-E_expected;
	LED-F_expected_prev = LED-F_expected;
	LED-G_expected_prev = LED-G_expected;
end



// expected A0
initial
begin
	A0_expected = 1'bX;
end 

// expected A1
initial
begin
	A1_expected = 1'bX;
end 

// expected A2
initial
begin
	A2_expected = 1'bX;
end 

// expected LED-A
initial
begin
	LED-A_expected = 1'bX;
end 

// expected LED-B
initial
begin
	LED-B_expected = 1'bX;
end 

// expected LED-C
initial
begin
	LED-C_expected = 1'bX;
end 

// expected LED-D
initial
begin
	LED-D_expected = 1'bX;
end 

// expected LED-E
initial
begin
	LED-E_expected = 1'bX;
end 

// expected LED-F
initial
begin
	LED-F_expected = 1'bX;
end 

// expected LED-G
initial
begin
	LED-G_expected = 1'bX;
end 
// generate trigger
always @(A0_expected or A0 or A1_expected or A1 or A2_expected or A2 or LED-A_expected or LED-A or LED-B_expected or LED-B or LED-C_expected or LED-C or LED-D_expected or LED-D or LED-E_expected or LED-E or LED-F_expected or LED-F or LED-G_expected or LED-G or U2_138_select_expected or U2_138_select or U3_138_select_expected or U3_138_select)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A0 = %b | expected A1 = %b | expected A2 = %b | expected LED-A = %b | expected LED-B = %b | expected LED-C = %b | expected LED-D = %b | expected LED-E = %b | expected LED-F = %b | expected LED-G = %b | expected U2_138_select = %b | expected U3_138_select = %b | ",A0_expected_prev,A1_expected_prev,A2_expected_prev,LED-A_expected_prev,LED-B_expected_prev,LED-C_expected_prev,LED-D_expected_prev,LED-E_expected_prev,LED-F_expected_prev,LED-G_expected_prev,U2_138_select_expected_prev,U3_138_select_expected_prev);
	$display("| real A0 = %b | real A1 = %b | real A2 = %b | real LED-A = %b | real LED-B = %b | real LED-C = %b | real LED-D = %b | real LED-E = %b | real LED-F = %b | real LED-G = %b | real U2_138_select = %b | real U3_138_select = %b | ",A0_prev,A1_prev,A2_prev,LED-A_prev,LED-B_prev,LED-C_prev,LED-D_prev,LED-E_prev,LED-F_prev,LED-G_prev,U2_138_select_prev,U3_138_select_prev);
`endif
	if (
		( A0_expected_prev !== 1'bx ) && ( A0_prev !== A0_expected_prev )
		&& ((A0_expected_prev !== last_A0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A0_expected_prev);
		$display ("     Real value = %b", A0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A0_exp = A0_expected_prev;
	end
	if (
		( A1_expected_prev !== 1'bx ) && ( A1_prev !== A1_expected_prev )
		&& ((A1_expected_prev !== last_A1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A1_expected_prev);
		$display ("     Real value = %b", A1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_A1_exp = A1_expected_prev;
	end
	if (
		( A2_expected_prev !== 1'bx ) && ( A2_prev !== A2_expected_prev )
		&& ((A2_expected_prev !== last_A2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A2_expected_prev);
		$display ("     Real value = %b", A2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_A2_exp = A2_expected_prev;
	end
	if (
		( LED-A_expected_prev !== 1'bx ) && ( LED-A_prev !== LED-A_expected_prev )
		&& ((LED-A_expected_prev !== last_LED-A_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED-A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED-A_expected_prev);
		$display ("     Real value = %b", LED-A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED-A_exp = LED-A_expected_prev;
	end
	if (
		( LED-B_expected_prev !== 1'bx ) && ( LED-B_prev !== LED-B_expected_prev )
		&& ((LED-B_expected_prev !== last_LED-B_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED-B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED-B_expected_prev);
		$display ("     Real value = %b", LED-B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LED-B_exp = LED-B_expected_prev;
	end
	if (
		( LED-C_expected_prev !== 1'bx ) && ( LED-C_prev !== LED-C_expected_prev )
		&& ((LED-C_expected_prev !== last_LED-C_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED-C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED-C_expected_prev);
		$display ("     Real value = %b", LED-C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LED-C_exp = LED-C_expected_prev;
	end
	if (
		( LED-D_expected_prev !== 1'bx ) && ( LED-D_prev !== LED-D_expected_prev )
		&& ((LED-D_expected_prev !== last_LED-D_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED-D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED-D_expected_prev);
		$display ("     Real value = %b", LED-D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED-D_exp = LED-D_expected_prev;
	end
	if (
		( LED-E_expected_prev !== 1'bx ) && ( LED-E_prev !== LED-E_expected_prev )
		&& ((LED-E_expected_prev !== last_LED-E_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED-E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED-E_expected_prev);
		$display ("     Real value = %b", LED-E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LED-E_exp = LED-E_expected_prev;
	end
	if (
		( LED-F_expected_prev !== 1'bx ) && ( LED-F_prev !== LED-F_expected_prev )
		&& ((LED-F_expected_prev !== last_LED-F_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED-F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED-F_expected_prev);
		$display ("     Real value = %b", LED-F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LED-F_exp = LED-F_expected_prev;
	end
	if (
		( LED-G_expected_prev !== 1'bx ) && ( LED-G_prev !== LED-G_expected_prev )
		&& ((LED-G_expected_prev !== last_LED-G_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED-G :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED-G_expected_prev);
		$display ("     Real value = %b", LED-G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LED-G_exp = LED-G_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire A0;
wire A1;
wire A2;
wire LED-A;
wire LED-B;
wire LED-C;
wire LED-D;
wire LED-E;
wire LED-F;
wire LED-G;
wire U2_138_select;
wire U3_138_select;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.clk(clk),
	.\LED-A (LED-A),
	.\LED-B (LED-B),
	.\LED-C (LED-C),
	.\LED-D (LED-D),
	.\LED-E (LED-E),
	.\LED-F (LED-F),
	.\LED-G (LED-G),
	.U2_138_select(U2_138_select),
	.U3_138_select(U3_138_select)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

main_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.LED-A(LED-A),
	.LED-B(LED-B),
	.LED-C(LED-C),
	.LED-D(LED-D),
	.LED-E(LED-E),
	.LED-F(LED-F),
	.LED-G(LED-G),
	.U2_138_select(U2_138_select),
	.U3_138_select(U3_138_select),
	.sampler_rx(sampler)
);
endmodule

